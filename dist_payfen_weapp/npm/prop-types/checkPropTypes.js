"use strict";var printWarning=function(){},ReactPropTypesSecret=require("./lib/ReactPropTypesSecret.js"),loggedTypeFailures={},has=Function.call.bind(Object.prototype.hasOwnProperty);function checkPropTypes(e,r,n,t,a){for(var o in e)if(has(e,o)){var i;try{if("function"!=typeof e[o]){var c=Error((t||"React class")+": "+n+" type `"+o+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof e[o]+"`.");throw c.name="Invariant Violation",c}i=e[o](r,o,t,n,null,ReactPropTypesSecret)}catch(e){i=e}if(!i||i instanceof Error||printWarning((t||"React class")+": type specification of "+n+" `"+o+"` is invalid; the type checker function must return `null` or an `Error` but returned a "+typeof i+". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."),i instanceof Error&&!(i.message in loggedTypeFailures)){loggedTypeFailures[i.message]=!0;var s=a?a():"";printWarning("Failed "+n+" type: "+i.message+(null!=s?s:""))}}}printWarning=function(e){var r="Warning: "+e;"undefined"!=typeof console&&console.error(r);try{throw new Error(r)}catch(e){}},checkPropTypes.resetWarningCache=function(){loggedTypeFailures={}},module.exports=checkPropTypes;